"use strict";

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { "default": obj }; }

var _commander = require("commander");

var _commander2 = _interopRequireDefault(_commander);

var _nofs = require("nofs");

var _nofs2 = _interopRequireDefault(_nofs);

var _path = require("path");

var _path2 = _interopRequireDefault(_path);

var _brush = require("./brush");

var _brush2 = _interopRequireDefault(_brush);

var _ = require("./");

var _2 = _interopRequireDefault(_);

var watchList = [];

var subArgIndex = process.argv.indexOf("--");

/* istanbul ignore if */
if (subArgIndex > -1) {
    // This is hotfix of the Commander.js bug.
    process.argv.splice(subArgIndex, 1);
}

_commander2["default"].description("junit cli tool to run / watch tests automatically").usage("[options] [file | pattern...]").option("-s, --suit <module>", "a 'it' transformer which will be required as an function [(it, path) => it]", null).option("-o --reporter <module>", "a reporter module [{ formatAssertErr, logPass, logFail, logFinal }]", null).option("-r, --register <str>", "language try to register [babel]", "babel/register").option("-l, --limit <num>", "concurrent test limit [Infinity]", parseInt).option("-g, --grep <pattern>", "only run tests matching the pattern", "").option("-t, --timeout <num>", "case timeout in milliseconds [5000]", parseInt).option("-b, --isBail", "bail after first test failure [true]").option("-f, --isFailOnUnhandled", "failed on unhandled exception [true]").option("-p, --prompt <str>", "the prompt string ['junit cli >']", _brush2["default"].underline(_brush2["default"].grey("junit cli >"))).option("-w, --watch [pattern]", "watch file pattern list",
/* istanbul ignore next */
function (p) {
    watchList.push(p);
}).on("--help",
/* istanbul ignore next */
function () {
    console.log("  Examples:\n\n" + "    junit test/*.js\n" + "    junit test.es7.js\n" + "    junit -w 'test/**/*.js' -w 'src/*.js' test.js\n" + "    junit -r coffee-script test.coffee\n");
}).parse(process.argv);

try {
    require(_commander2["default"].register);
} catch (err) {
    /* istanbul ignore next */
    null;
}

var testReg = new RegExp(_commander2["default"].grep);
var suit = undefined,
    reporter = undefined;

function loadModule(name) {
    try {
        return require.resolve(name);
    } catch (err) {
        return require(_path2["default"].resolve(name));
    }
}

function run() {
    // test suit hook
    /* istanbul ignore else */
    if (_commander2["default"].suit) {
        suit = loadModule(_commander2["default"].suit);
    } else {
        suit = function (it) {
            return it;
        };
    }

    // reporter hook
    /* istanbul ignore if */
    if (_commander2["default"].reporter) {
        reporter = loadModule(_commander2["default"].reporter);
    } else {
        reporter = require("./reporter")(_commander2["default"].prompt);
    }

    var it = (0, _2["default"])({
        isExitWithFailed: !_commander2["default"].watch,
        reporter: reporter,
        isBail: _commander2["default"].isBail,
        isFailOnUnhandled: _commander2["default"].isFailOnUnhandled,
        timeout: _commander2["default"].timeout || 5000
    });

    var tests = [];
    return _nofs2["default"].glob(_commander2["default"].args, {
        iter: function iter(_ref) {
            var path = _ref.path;
            return tests = tests.concat(require(_path2["default"].resolve(path))(suit(it, path)));
        }
    }).then(function () {
        return it.run(_commander2["default"].limit || Infinity, tests.filter(function (_ref2) {
            var msg = _ref2.msg;
            return testReg.test(msg);
        }));
    });
}

run();

/* istanbul ignore if */
if (_commander2["default"].watch) {
    (function () {
        var sep = "";

        for (var i = process.stdout.columns; i > 0; i--) {
            sep += "*";
        }

        var handler = function handler(path) {
            process.stdout.write(_brush2["default"].yellow(sep));
            console.log(_commander2["default"].prompt, _brush2["default"].cyan("file modified:"), path);
            delete require.cache[_path2["default"].resolve(path)];
            run();
        };

        var list = [];
        _nofs2["default"].glob(_commander2["default"].args.concat(watchList), { iter: function iter(_ref3) {
                var path = _ref3.path;

                if (list.indexOf(path) > -1) return;
                list.push(path);
                _nofs2["default"].watchPath(path, { handler: handler });
            } });
    })();
}